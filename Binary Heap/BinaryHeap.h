#pragma once
#include "DynArray.h"

template<class T>
class BinaryHeap :
	protected DynArray
{
	DynArray da;
public:
	BinaryHeap();
	~BinaryHeap();


};/////////////////////////////////////////////////////////////////////////////
// Function : enqueue
// Parameters : v - the item to add to the heap
// Notes : after the new item is added, this function ensures that the 
//	smallest value in the heap is in [0]
/////////////////////////////////////////////////////////////////////////////
void enqueue(const T &v)
{

}

/////////////////////////////////////////////////////////////////////////////
// Function : dequeue 
// Return : the smallest item in the heap, or Type() if the heap is empty
// Notes : after the smallest item is dequeued, this function ensures that 
//	the smallest item is in [0]
/////////////////////////////////////////////////////////////////////////////
T dequeue()
{
	
}

///////////////////////////////////////////////////////////////////////////////
// Function : operator[]
// Parameters : index - the index to access
// Return : Type& - the item in the index
/////////////////////////////////////////////////////////////////////////////
T& operator[](int index)
{
	return array[index];
}

/////////////////////////////////////////////////////////////////////////////
// Function : clear	
// Notes : clears the heap out
/////////////////////////////////////////////////////////////////////////////
void clear()
{

}

///////////////////////////////////////////////////////////////////////////////
// Function : size
// Return : the number of valid items in the heap
/////////////////////////////////////////////////////////////////////////////
unsigned int size()
{
	return 0;
}

